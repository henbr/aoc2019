#include <vector>
#include <string>
#include <iostream>
#include <numeric>
#include <limits>

using namespace std;



vector<string> input = {
    /*
    "#.#...#.#.",
    ".###....#.",
    ".#....#...",
    "##.#.#.#.#",
    "....#.#.#.",
    ".##..###.#",
    "..#...##..",
    "..##....##",
    "......#...",
    ".####.###.",*/
    /*
    "#.........",
    "...A......",
    "...B..a...",
    ".EDCG....a",
    "..F.c.b...",
    ".....c....",
    "..efd.c.gb",
    ".......c..",
    "....f...c.",
    "...e..d..c",*/

    /*
  // 1234
    ".#..#",// 0
    ".....",// 1
    "#####",// 2
    "....#",// 3
    "...##",// 4*/

    "##.###.#.......#.#....#....#..........#.",
    "....#..#..#.....#.##.............#......",
    "...#.#..###..#..#.....#........#......#.",
    "#......#.....#.##.#.##.##...#...#......#",
    ".............#....#.....#.#......#.#....",
    "..##.....#..#..#.#.#....##.......#.....#",
    ".#........#...#...#.#.....#.....#.#..#.#",
    "...#...........#....#..#.#..#...##.#.#..",
    "#.##.#.#...#..#...........#..........#..",
    "........#.#..#..##.#.##......##.........",
    "................#.##.#....##.......#....",
    "#............#.........###...#...#.....#",
    "#....#..#....##.#....#...#.....#......#.",
    ".........#...#.#....#.#.....#...#...#...",
    ".............###.....#.#...##...........",
    "...#...#.......#....#.#...#....#...#....",
    ".....#..#...#.#.........##....#...#.....",
    "....##.........#......#...#...#....#..#.",
    "#...#..#..#.#...##.#..#.............#.##",
    ".....#...##..#....#.#.##..##.....#....#.",
    "..#....#..#........#.#.......#.##..###..",
    "...#....#..#.#.#........##..#..#..##....",
    ".......#.##.....#.#.....#...#...........",
    "........#.......#.#...........#..###..##",
    "...#.....#..#.#.......##.###.###...#....",
    "...............#..#....#.#....#....#.#..",
    "#......#...#.....#.#........##.##.#.....",
    "###.......#............#....#..#.#......",
    "..###.#.#....##..#.......#.............#",
    "##.#.#...#.#..........##.#..#...##......",
    "..#......#..........#.#..#....##........",
    "......##.##.#....#....#..........#...#..",
    "#.#..#..#.#...........#..#.......#..#.#.",
    "#.....#.#.........#............#.#..##.#",
    ".....##....#.##....#.....#..##....#..#..",
    ".#.......#......#.......#....#....#..#..",
    "...#........#.#.##..#.#..#..#........#..",
    "#........#.#......#..###....##..#......#",
    "...#....#...#.....#.....#.##.#..#...#...",
    "#.#.....##....#...........#.....#...#...",

};

struct Point {
    int x = 0;
    int y = 0;
    int divisor = 0;
};

vector<vector<Point>> lookup = vector<vector<Point>>(input.size(), vector<Point>(input[0].length()));



void init_lookup() {
    for (int y = 0; y < lookup.size(); y++) {
        for (int x = 0; x < lookup[0].size(); x++) {
           int divisor = gcd(x, y);
           if (divisor != 0) {
               lookup[y][x].divisor = divisor;
               lookup[y][x].x = x / divisor;
               lookup[y][x].y = y / divisor;
           }
        }
    }
}

const Point get_gcd(int x, int y) {
    const int ax = abs(x);
    const int ay = abs(y);


    auto res = lookup[ay][ax];

    res.x = x < 0 ? res.x * -1 : res.x;
    res.y = y < 0 ? res.y * -1 : res.y;

    return res;
}

int get_num_visible_astroids(int xpos, int ypos) {
    vector<vector<bool>> vis = vector<vector<bool>>(input.size(), vector<bool>(input[0].length(), false));
    int count = 0;


    for (int y = 0; y < input.size(); y++) {
        for (int x = 0; x < input[0].length(); x++) {
            if (input[y][x] == '.') {
                continue;
            }

            if (x == xpos && y == ypos) {
                continue;
            }

            const int dx = x - xpos;
            const int dy = y - ypos;
            const auto dgcd = get_gcd(dx, dy);

            int vx = xpos + dgcd.x;
            int vy = ypos + dgcd.y;

            if (!vis[vy][vx]) {
           //     cout << x << ", " << y << endl;
                count++;
                vis[vy][vx] = true;
            }
        }
    }

    return count;
}


int main() {
    init_lookup();

    int max_count = numeric_limits<int>::min();
    int maxx = 0;
    int maxy = 0;
    for (int y = 0; y < input.size(); y++) {
        for (int x = 0; x < input[0].length(); x++) {
            if (input[y][x] == '.') {
                continue;
            }

            auto res = get_num_visible_astroids(x, y);
            if (max_count < res) {
                max_count = res;
                maxx = x;
                maxy = y;
            }
        }
    }

   // int max_count = get_num_visible_astroids(3,4);

    cout << "Max: " << max_count << " at: " << maxx << ", " << maxy << endl;


    return 0;
}
